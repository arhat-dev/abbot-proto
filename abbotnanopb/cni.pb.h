/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2 */

#ifndef PB_ABBOT_CNI_PB_H_INCLUDED
#define PB_ABBOT_CNI_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _abbot_Request_ActionType {
    abbot_Request_ActionType__invalid = 0,
    abbot_Request_ActionType_CREATE = 1,
    abbot_Request_ActionType_DELETE = 2,
    abbot_Request_ActionType_UPDATE_CONFIG = 3,
    abbot_Request_ActionType_GET_ADDR = 4,
    abbot_Request_ActionType_UPDATE_LINK = 5,
    abbot_Request_ActionType_RESTORE_LINK = 6
} abbot_Request_ActionType;

/* Struct definitions */
typedef struct _abbot_AddressResponse {
    pb_callback_t ip;
} abbot_AddressResponse;

typedef struct _abbot_CNICapArgs_DNSConfig {
    pb_callback_t servers;
    pb_callback_t searches;
    pb_callback_t options;
} abbot_CNICapArgs_DNSConfig;

typedef struct _abbot_CNICapArgs_IPRange {
    pb_callback_t subnet;
    pb_callback_t range_start;
    pb_callback_t range_end;
    pb_callback_t gateway;
} abbot_CNICapArgs_IPRange;

typedef struct _abbot_ConfigOptions {
    pb_callback_t ipv4_subnet;
    pb_callback_t ipv6_subnet;
} abbot_ConfigOptions;

typedef struct _abbot_CreateOptions_CniArgsEntry {
    pb_callback_t key;
    pb_callback_t value;
} abbot_CreateOptions_CniArgsEntry;

typedef struct _abbot_EmptyResponse {
    char dummy_field;
} abbot_EmptyResponse;

typedef struct _abbot_CNICapArgs_Bandwidth {
    int32_t ingress_rate;
    int32_t ingress_burst;
    int32_t egress_rate;
    int32_t egress_burst;
} abbot_CNICapArgs_Bandwidth;

typedef struct _abbot_CNICapArgs_PortMap {
    int32_t container_port;
    int32_t host_port;
    pb_callback_t protocol;
    pb_callback_t host_ip;
} abbot_CNICapArgs_PortMap;

typedef struct _abbot_CreateOptions {
    pb_callback_t container_id;
    uint32_t pid;
    pb_callback_t cni_args;
    pb_callback_t cap_args;
} abbot_CreateOptions;

typedef struct _abbot_DeleteLinkOptions {
    pb_callback_t container_id;
    uint32_t pid;
} abbot_DeleteLinkOptions;

typedef struct _abbot_GetAddrOptions {
    uint32_t pid;
} abbot_GetAddrOptions;

typedef struct _abbot_Response {
    pb_size_t which_resp;
    union {
        abbot_AddressResponse addr_resp;
        abbot_EmptyResponse empty_resp;
    } resp;
} abbot_Response;

typedef struct _abbot_RestoreLinkOptions {
    pb_callback_t container_id;
    uint32_t pid;
} abbot_RestoreLinkOptions;

typedef struct _abbot_UpdateLinkOptions {
    pb_callback_t container_id;
    uint32_t pid;
    pb_callback_t ipv4_pod_cidr;
    pb_callback_t ipv6_pod_cidr;
} abbot_UpdateLinkOptions;

typedef struct _abbot_CNICapArgs {
    pb_size_t which_option;
    union {
        abbot_CNICapArgs_PortMap port_map_arg;
        abbot_CNICapArgs_Bandwidth bandwidth_arg;
        abbot_CNICapArgs_IPRange ip_range_arg;
        abbot_CNICapArgs_DNSConfig dns_config_arg;
    } option;
} abbot_CNICapArgs;

typedef struct _abbot_Request {
    abbot_Request_ActionType action;
    pb_size_t which_option;
    union {
        abbot_CreateOptions create_opts;
        abbot_ConfigOptions config_opts;
        abbot_GetAddrOptions get_addr_opts;
        abbot_UpdateLinkOptions update_link_opts;
        abbot_RestoreLinkOptions restore_link_opts;
        abbot_DeleteLinkOptions delete_link_opts;
    } option;
} abbot_Request;


/* Helper constants for enums */
#define _abbot_Request_ActionType_MIN abbot_Request_ActionType__invalid
#define _abbot_Request_ActionType_MAX abbot_Request_ActionType_RESTORE_LINK
#define _abbot_Request_ActionType_ARRAYSIZE ((abbot_Request_ActionType)(abbot_Request_ActionType_RESTORE_LINK+1))


/* Initializer values for message structs */
#define abbot_CNICapArgs_init_default            {0, {abbot_CNICapArgs_PortMap_init_default}}
#define abbot_CNICapArgs_PortMap_init_default    {0, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define abbot_CNICapArgs_Bandwidth_init_default  {0, 0, 0, 0}
#define abbot_CNICapArgs_IPRange_init_default    {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define abbot_CNICapArgs_DNSConfig_init_default  {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define abbot_CreateOptions_init_default         {{{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define abbot_CreateOptions_CniArgsEntry_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define abbot_ConfigOptions_init_default         {{{NULL}, NULL}, {{NULL}, NULL}}
#define abbot_GetAddrOptions_init_default        {0}
#define abbot_UpdateLinkOptions_init_default     {{{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define abbot_RestoreLinkOptions_init_default    {{{NULL}, NULL}, 0}
#define abbot_DeleteLinkOptions_init_default     {{{NULL}, NULL}, 0}
#define abbot_Request_init_default               {_abbot_Request_ActionType_MIN, 0, {abbot_CreateOptions_init_default}}
#define abbot_Response_init_default              {0, {abbot_AddressResponse_init_default}}
#define abbot_AddressResponse_init_default       {{{NULL}, NULL}}
#define abbot_EmptyResponse_init_default         {0}
#define abbot_CNICapArgs_init_zero               {0, {abbot_CNICapArgs_PortMap_init_zero}}
#define abbot_CNICapArgs_PortMap_init_zero       {0, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define abbot_CNICapArgs_Bandwidth_init_zero     {0, 0, 0, 0}
#define abbot_CNICapArgs_IPRange_init_zero       {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define abbot_CNICapArgs_DNSConfig_init_zero     {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define abbot_CreateOptions_init_zero            {{{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define abbot_CreateOptions_CniArgsEntry_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define abbot_ConfigOptions_init_zero            {{{NULL}, NULL}, {{NULL}, NULL}}
#define abbot_GetAddrOptions_init_zero           {0}
#define abbot_UpdateLinkOptions_init_zero        {{{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define abbot_RestoreLinkOptions_init_zero       {{{NULL}, NULL}, 0}
#define abbot_DeleteLinkOptions_init_zero        {{{NULL}, NULL}, 0}
#define abbot_Request_init_zero                  {_abbot_Request_ActionType_MIN, 0, {abbot_CreateOptions_init_zero}}
#define abbot_Response_init_zero                 {0, {abbot_AddressResponse_init_zero}}
#define abbot_AddressResponse_init_zero          {{{NULL}, NULL}}
#define abbot_EmptyResponse_init_zero            {0}

/* Field tags (for use in manual encoding/decoding) */
#define abbot_AddressResponse_ip_tag             1
#define abbot_CNICapArgs_DNSConfig_servers_tag   1
#define abbot_CNICapArgs_DNSConfig_searches_tag  2
#define abbot_CNICapArgs_DNSConfig_options_tag   3
#define abbot_CNICapArgs_IPRange_subnet_tag      1
#define abbot_CNICapArgs_IPRange_range_start_tag 2
#define abbot_CNICapArgs_IPRange_range_end_tag   3
#define abbot_CNICapArgs_IPRange_gateway_tag     4
#define abbot_ConfigOptions_ipv4_subnet_tag      1
#define abbot_ConfigOptions_ipv6_subnet_tag      2
#define abbot_CreateOptions_CniArgsEntry_key_tag 1
#define abbot_CreateOptions_CniArgsEntry_value_tag 2
#define abbot_CNICapArgs_Bandwidth_ingress_rate_tag 1
#define abbot_CNICapArgs_Bandwidth_ingress_burst_tag 2
#define abbot_CNICapArgs_Bandwidth_egress_rate_tag 3
#define abbot_CNICapArgs_Bandwidth_egress_burst_tag 4
#define abbot_CNICapArgs_PortMap_container_port_tag 1
#define abbot_CNICapArgs_PortMap_host_port_tag   2
#define abbot_CNICapArgs_PortMap_protocol_tag    3
#define abbot_CNICapArgs_PortMap_host_ip_tag     4
#define abbot_CreateOptions_container_id_tag     1
#define abbot_CreateOptions_pid_tag              2
#define abbot_CreateOptions_cni_args_tag         4
#define abbot_CreateOptions_cap_args_tag         5
#define abbot_DeleteLinkOptions_container_id_tag 1
#define abbot_DeleteLinkOptions_pid_tag          2
#define abbot_GetAddrOptions_pid_tag             1
#define abbot_Response_addr_resp_tag             6
#define abbot_Response_empty_resp_tag            7
#define abbot_RestoreLinkOptions_container_id_tag 1
#define abbot_RestoreLinkOptions_pid_tag         2
#define abbot_UpdateLinkOptions_container_id_tag 1
#define abbot_UpdateLinkOptions_pid_tag          2
#define abbot_UpdateLinkOptions_ipv4_pod_cidr_tag 3
#define abbot_UpdateLinkOptions_ipv6_pod_cidr_tag 4
#define abbot_CNICapArgs_port_map_arg_tag        1
#define abbot_CNICapArgs_bandwidth_arg_tag       2
#define abbot_CNICapArgs_ip_range_arg_tag        3
#define abbot_CNICapArgs_dns_config_arg_tag      4
#define abbot_Request_action_tag                 1
#define abbot_Request_create_opts_tag            2
#define abbot_Request_config_opts_tag            3
#define abbot_Request_get_addr_opts_tag          4
#define abbot_Request_update_link_opts_tag       5
#define abbot_Request_restore_link_opts_tag      6
#define abbot_Request_delete_link_opts_tag       7

/* Struct field encoding specification for nanopb */
#define abbot_CNICapArgs_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (option,port_map_arg,option.port_map_arg),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (option,bandwidth_arg,option.bandwidth_arg),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (option,ip_range_arg,option.ip_range_arg),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (option,dns_config_arg,option.dns_config_arg),   4)
#define abbot_CNICapArgs_CALLBACK NULL
#define abbot_CNICapArgs_DEFAULT NULL
#define abbot_CNICapArgs_option_port_map_arg_MSGTYPE abbot_CNICapArgs_PortMap
#define abbot_CNICapArgs_option_bandwidth_arg_MSGTYPE abbot_CNICapArgs_Bandwidth
#define abbot_CNICapArgs_option_ip_range_arg_MSGTYPE abbot_CNICapArgs_IPRange
#define abbot_CNICapArgs_option_dns_config_arg_MSGTYPE abbot_CNICapArgs_DNSConfig

#define abbot_CNICapArgs_PortMap_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    container_port,    1) \
X(a, STATIC,   SINGULAR, INT32,    host_port,         2) \
X(a, CALLBACK, SINGULAR, STRING,   protocol,          3) \
X(a, CALLBACK, SINGULAR, STRING,   host_ip,           4)
#define abbot_CNICapArgs_PortMap_CALLBACK pb_default_field_callback
#define abbot_CNICapArgs_PortMap_DEFAULT NULL

#define abbot_CNICapArgs_Bandwidth_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    ingress_rate,      1) \
X(a, STATIC,   SINGULAR, INT32,    ingress_burst,     2) \
X(a, STATIC,   SINGULAR, INT32,    egress_rate,       3) \
X(a, STATIC,   SINGULAR, INT32,    egress_burst,      4)
#define abbot_CNICapArgs_Bandwidth_CALLBACK NULL
#define abbot_CNICapArgs_Bandwidth_DEFAULT NULL

#define abbot_CNICapArgs_IPRange_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   subnet,            1) \
X(a, CALLBACK, SINGULAR, STRING,   range_start,       2) \
X(a, CALLBACK, SINGULAR, STRING,   range_end,         3) \
X(a, CALLBACK, SINGULAR, STRING,   gateway,           4)
#define abbot_CNICapArgs_IPRange_CALLBACK pb_default_field_callback
#define abbot_CNICapArgs_IPRange_DEFAULT NULL

#define abbot_CNICapArgs_DNSConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   servers,           1) \
X(a, CALLBACK, REPEATED, STRING,   searches,          2) \
X(a, CALLBACK, REPEATED, STRING,   options,           3)
#define abbot_CNICapArgs_DNSConfig_CALLBACK pb_default_field_callback
#define abbot_CNICapArgs_DNSConfig_DEFAULT NULL

#define abbot_CreateOptions_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   container_id,      1) \
X(a, STATIC,   SINGULAR, UINT32,   pid,               2) \
X(a, CALLBACK, REPEATED, MESSAGE,  cni_args,          4) \
X(a, CALLBACK, REPEATED, MESSAGE,  cap_args,          5)
#define abbot_CreateOptions_CALLBACK pb_default_field_callback
#define abbot_CreateOptions_DEFAULT NULL
#define abbot_CreateOptions_cni_args_MSGTYPE abbot_CreateOptions_CniArgsEntry
#define abbot_CreateOptions_cap_args_MSGTYPE abbot_CNICapArgs

#define abbot_CreateOptions_CniArgsEntry_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, CALLBACK, SINGULAR, STRING,   value,             2)
#define abbot_CreateOptions_CniArgsEntry_CALLBACK pb_default_field_callback
#define abbot_CreateOptions_CniArgsEntry_DEFAULT NULL

#define abbot_ConfigOptions_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   ipv4_subnet,       1) \
X(a, CALLBACK, SINGULAR, STRING,   ipv6_subnet,       2)
#define abbot_ConfigOptions_CALLBACK pb_default_field_callback
#define abbot_ConfigOptions_DEFAULT NULL

#define abbot_GetAddrOptions_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   pid,               1)
#define abbot_GetAddrOptions_CALLBACK NULL
#define abbot_GetAddrOptions_DEFAULT NULL

#define abbot_UpdateLinkOptions_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   container_id,      1) \
X(a, STATIC,   SINGULAR, UINT32,   pid,               2) \
X(a, CALLBACK, SINGULAR, STRING,   ipv4_pod_cidr,     3) \
X(a, CALLBACK, SINGULAR, STRING,   ipv6_pod_cidr,     4)
#define abbot_UpdateLinkOptions_CALLBACK pb_default_field_callback
#define abbot_UpdateLinkOptions_DEFAULT NULL

#define abbot_RestoreLinkOptions_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   container_id,      1) \
X(a, STATIC,   SINGULAR, UINT32,   pid,               2)
#define abbot_RestoreLinkOptions_CALLBACK pb_default_field_callback
#define abbot_RestoreLinkOptions_DEFAULT NULL

#define abbot_DeleteLinkOptions_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   container_id,      1) \
X(a, STATIC,   SINGULAR, UINT32,   pid,               2)
#define abbot_DeleteLinkOptions_CALLBACK pb_default_field_callback
#define abbot_DeleteLinkOptions_DEFAULT NULL

#define abbot_Request_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    action,            1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (option,create_opts,option.create_opts),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (option,config_opts,option.config_opts),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (option,get_addr_opts,option.get_addr_opts),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (option,update_link_opts,option.update_link_opts),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (option,restore_link_opts,option.restore_link_opts),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (option,delete_link_opts,option.delete_link_opts),   7)
#define abbot_Request_CALLBACK NULL
#define abbot_Request_DEFAULT NULL
#define abbot_Request_option_create_opts_MSGTYPE abbot_CreateOptions
#define abbot_Request_option_config_opts_MSGTYPE abbot_ConfigOptions
#define abbot_Request_option_get_addr_opts_MSGTYPE abbot_GetAddrOptions
#define abbot_Request_option_update_link_opts_MSGTYPE abbot_UpdateLinkOptions
#define abbot_Request_option_restore_link_opts_MSGTYPE abbot_RestoreLinkOptions
#define abbot_Request_option_delete_link_opts_MSGTYPE abbot_DeleteLinkOptions

#define abbot_Response_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (resp,addr_resp,resp.addr_resp),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (resp,empty_resp,resp.empty_resp),   7)
#define abbot_Response_CALLBACK NULL
#define abbot_Response_DEFAULT NULL
#define abbot_Response_resp_addr_resp_MSGTYPE abbot_AddressResponse
#define abbot_Response_resp_empty_resp_MSGTYPE abbot_EmptyResponse

#define abbot_AddressResponse_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   ip,                1)
#define abbot_AddressResponse_CALLBACK pb_default_field_callback
#define abbot_AddressResponse_DEFAULT NULL

#define abbot_EmptyResponse_FIELDLIST(X, a) \

#define abbot_EmptyResponse_CALLBACK NULL
#define abbot_EmptyResponse_DEFAULT NULL

extern const pb_msgdesc_t abbot_CNICapArgs_msg;
extern const pb_msgdesc_t abbot_CNICapArgs_PortMap_msg;
extern const pb_msgdesc_t abbot_CNICapArgs_Bandwidth_msg;
extern const pb_msgdesc_t abbot_CNICapArgs_IPRange_msg;
extern const pb_msgdesc_t abbot_CNICapArgs_DNSConfig_msg;
extern const pb_msgdesc_t abbot_CreateOptions_msg;
extern const pb_msgdesc_t abbot_CreateOptions_CniArgsEntry_msg;
extern const pb_msgdesc_t abbot_ConfigOptions_msg;
extern const pb_msgdesc_t abbot_GetAddrOptions_msg;
extern const pb_msgdesc_t abbot_UpdateLinkOptions_msg;
extern const pb_msgdesc_t abbot_RestoreLinkOptions_msg;
extern const pb_msgdesc_t abbot_DeleteLinkOptions_msg;
extern const pb_msgdesc_t abbot_Request_msg;
extern const pb_msgdesc_t abbot_Response_msg;
extern const pb_msgdesc_t abbot_AddressResponse_msg;
extern const pb_msgdesc_t abbot_EmptyResponse_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define abbot_CNICapArgs_fields &abbot_CNICapArgs_msg
#define abbot_CNICapArgs_PortMap_fields &abbot_CNICapArgs_PortMap_msg
#define abbot_CNICapArgs_Bandwidth_fields &abbot_CNICapArgs_Bandwidth_msg
#define abbot_CNICapArgs_IPRange_fields &abbot_CNICapArgs_IPRange_msg
#define abbot_CNICapArgs_DNSConfig_fields &abbot_CNICapArgs_DNSConfig_msg
#define abbot_CreateOptions_fields &abbot_CreateOptions_msg
#define abbot_CreateOptions_CniArgsEntry_fields &abbot_CreateOptions_CniArgsEntry_msg
#define abbot_ConfigOptions_fields &abbot_ConfigOptions_msg
#define abbot_GetAddrOptions_fields &abbot_GetAddrOptions_msg
#define abbot_UpdateLinkOptions_fields &abbot_UpdateLinkOptions_msg
#define abbot_RestoreLinkOptions_fields &abbot_RestoreLinkOptions_msg
#define abbot_DeleteLinkOptions_fields &abbot_DeleteLinkOptions_msg
#define abbot_Request_fields &abbot_Request_msg
#define abbot_Response_fields &abbot_Response_msg
#define abbot_AddressResponse_fields &abbot_AddressResponse_msg
#define abbot_EmptyResponse_fields &abbot_EmptyResponse_msg

/* Maximum encoded size of messages (where known) */
/* abbot_CNICapArgs_size depends on runtime parameters */
/* abbot_CNICapArgs_PortMap_size depends on runtime parameters */
#define abbot_CNICapArgs_Bandwidth_size          44
/* abbot_CNICapArgs_IPRange_size depends on runtime parameters */
/* abbot_CNICapArgs_DNSConfig_size depends on runtime parameters */
/* abbot_CreateOptions_size depends on runtime parameters */
/* abbot_CreateOptions_CniArgsEntry_size depends on runtime parameters */
/* abbot_ConfigOptions_size depends on runtime parameters */
#define abbot_GetAddrOptions_size                6
/* abbot_UpdateLinkOptions_size depends on runtime parameters */
/* abbot_RestoreLinkOptions_size depends on runtime parameters */
/* abbot_DeleteLinkOptions_size depends on runtime parameters */
/* abbot_Request_size depends on runtime parameters */
/* abbot_Response_size depends on runtime parameters */
/* abbot_AddressResponse_size depends on runtime parameters */
#define abbot_EmptyResponse_size                 0

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
