/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.4 */

#ifndef PB_ABBOT_DRIVER_WIREGUARD_PB_H_INCLUDED
#define PB_ABBOT_DRIVER_WIREGUARD_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _abbot_DriverWireguard_Peer {
    pb_callback_t public_key;
    pb_callback_t pre_shared_key;
    pb_callback_t endpoint;
    int32_t persistent_keepalive_interval;
    pb_callback_t allowed_ips;
} abbot_DriverWireguard_Peer;

typedef struct _abbot_DriverWireguard_Routing {
    bool enabled;
    int32_t table;
    int32_t firewall_mark;
} abbot_DriverWireguard_Routing;

typedef struct _abbot_DriverWireguard {
    pb_callback_t log_level;
    pb_callback_t private_key;
    int32_t listen_port;
    bool has_routing;
    abbot_DriverWireguard_Routing routing;
    pb_callback_t peers;
} abbot_DriverWireguard;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define abbot_DriverWireguard_init_default       {{{NULL}, NULL}, {{NULL}, NULL}, 0, false, abbot_DriverWireguard_Routing_init_default, {{NULL}, NULL}}
#define abbot_DriverWireguard_Peer_init_default  {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}}
#define abbot_DriverWireguard_Routing_init_default {0, 0, 0}
#define abbot_DriverWireguard_init_zero          {{{NULL}, NULL}, {{NULL}, NULL}, 0, false, abbot_DriverWireguard_Routing_init_zero, {{NULL}, NULL}}
#define abbot_DriverWireguard_Peer_init_zero     {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}}
#define abbot_DriverWireguard_Routing_init_zero  {0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define abbot_DriverWireguard_Peer_public_key_tag 1
#define abbot_DriverWireguard_Peer_pre_shared_key_tag 2
#define abbot_DriverWireguard_Peer_endpoint_tag  3
#define abbot_DriverWireguard_Peer_persistent_keepalive_interval_tag 4
#define abbot_DriverWireguard_Peer_allowed_ips_tag 5
#define abbot_DriverWireguard_Routing_enabled_tag 1
#define abbot_DriverWireguard_Routing_table_tag  2
#define abbot_DriverWireguard_Routing_firewall_mark_tag 3
#define abbot_DriverWireguard_log_level_tag      1
#define abbot_DriverWireguard_private_key_tag    2
#define abbot_DriverWireguard_listen_port_tag    3
#define abbot_DriverWireguard_routing_tag        4
#define abbot_DriverWireguard_peers_tag          5

/* Struct field encoding specification for nanopb */
#define abbot_DriverWireguard_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   log_level,         1) \
X(a, CALLBACK, SINGULAR, STRING,   private_key,       2) \
X(a, STATIC,   SINGULAR, INT32,    listen_port,       3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  routing,           4) \
X(a, CALLBACK, REPEATED, MESSAGE,  peers,             5)
#define abbot_DriverWireguard_CALLBACK pb_default_field_callback
#define abbot_DriverWireguard_DEFAULT NULL
#define abbot_DriverWireguard_routing_MSGTYPE abbot_DriverWireguard_Routing
#define abbot_DriverWireguard_peers_MSGTYPE abbot_DriverWireguard_Peer

#define abbot_DriverWireguard_Peer_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   public_key,        1) \
X(a, CALLBACK, SINGULAR, STRING,   pre_shared_key,    2) \
X(a, CALLBACK, SINGULAR, STRING,   endpoint,          3) \
X(a, STATIC,   SINGULAR, INT32,    persistent_keepalive_interval,   4) \
X(a, CALLBACK, REPEATED, STRING,   allowed_ips,       5)
#define abbot_DriverWireguard_Peer_CALLBACK pb_default_field_callback
#define abbot_DriverWireguard_Peer_DEFAULT NULL

#define abbot_DriverWireguard_Routing_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, INT32,    table,             2) \
X(a, STATIC,   SINGULAR, INT32,    firewall_mark,     3)
#define abbot_DriverWireguard_Routing_CALLBACK NULL
#define abbot_DriverWireguard_Routing_DEFAULT NULL

extern const pb_msgdesc_t abbot_DriverWireguard_msg;
extern const pb_msgdesc_t abbot_DriverWireguard_Peer_msg;
extern const pb_msgdesc_t abbot_DriverWireguard_Routing_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define abbot_DriverWireguard_fields &abbot_DriverWireguard_msg
#define abbot_DriverWireguard_Peer_fields &abbot_DriverWireguard_Peer_msg
#define abbot_DriverWireguard_Routing_fields &abbot_DriverWireguard_Routing_msg

/* Maximum encoded size of messages (where known) */
/* abbot_DriverWireguard_size depends on runtime parameters */
/* abbot_DriverWireguard_Peer_size depends on runtime parameters */
#define abbot_DriverWireguard_Routing_size       24

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
