/*
Copyright 2019 The arhat.dev Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package abbot;

option go_package = "arhat.dev/abbot-proto/abbotgopb";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "meta.proto";

// CNI capabilities args
// https://github.com/containernetworking/cni/blob/master/CONVENTIONS.md#well-known-capabilities
message CNICapArgs {
    message PortMap {
        int32 container_port = 1 [(gogoproto.jsontag) = "containerPort"];
        int32 host_port = 2 [(gogoproto.jsontag) = "hostPort"];
        string protocol = 3 [(gogoproto.jsontag) = "protocol"];
        string host_ip = 4 [(gogoproto.jsontag) = "hostIP"];
    }

    message Bandwidth {
        int32 ingress_rate = 1 [(gogoproto.jsontag) = "ingressRate,omitempty"];
        int32 ingress_burst = 2 [(gogoproto.jsontag) = "ingressBurst,omitempty"];
        int32 egress_rate = 3 [(gogoproto.jsontag) = "egressRate,omitempty"];
        int32 egress_burst = 4 [(gogoproto.jsontag) = "egressBurst,omitempty"];
    }

    message IPRange {
        string subnet = 1 [(gogoproto.jsontag) = "subnet"];
        string range_start = 2 [(gogoproto.jsontag) = "rangeStart,omitempty"];
        string range_end = 3 [(gogoproto.jsontag) = "rangeEnd,omitempty"];
        string gateway = 4 [(gogoproto.jsontag) = "gateway,omitempty"];
    }

    message DNSConfig {
        repeated string servers = 1 [(gogoproto.jsontag) = "servers,omitempty"];
        repeated string searches = 2 [(gogoproto.jsontag) = "searches,omitempty"];
        repeated string options = 3 [(gogoproto.jsontag) = "options,omitempty"];
    }

    message IPAddresses {
        repeated string ips = 1 [(gogoproto.jsontag) = "ips,omitempty"];
    }

    message MacAddress {
        string mac = 1 [(gogoproto.jsontag) = "mac,omitempty"];
    }

    message InfinibandGUID {
        string infiniband_guid = 1 [(gogoproto.jsontag) = "infinibandGUID,omitempty"];
    }

    message DeviceID {
        string device_id = 1 [(gogoproto.jsontag) = "deviceID,omitempty"];
    }

    oneof option {
        PortMap port_map_arg = 1;
        Bandwidth bandwidth_arg = 2;
        IPRange ip_range_arg = 3;
        DNSConfig dns_config_arg = 4;
        IPAddresses ip_addresses_arg = 5;
        MacAddress mac_address_arg = 6;
        InfinibandGUID infiniband_guid_arg = 7;
        DeviceID device_id_arg = 8;
    }
}

// Requests extending CNI commands
// https://github.com/containernetworking/cni/blob/master/SPEC.md#parameters

message ContainerNetworkEnsureRequest {
    // (required) container id
    string container_id = 1;

    // (required) pid will be used to form the netns path (/proc/<pid>/ns/net)
    uint32 pid = 2;

    // if no args provided, this Request instructs abbot to retrieve container network 
    // config stored in its dataDir and restore the container network

    // (optional) capabilities args
    repeated CNICapArgs cap_args = 3;

    // (optional) cni_args
    // https://github.com/containernetworking/cni/blob/master/CONVENTIONS.md#cni_args
    map<string, string> cni_args = 4;  // [deprecated = true] (still widely used)
}

// Restore container network with previous container config
message ContainerNetworkRestoreRequest {
    // (required) container id
    string container_id = 1;
    // (required) pid to generate netns path
    uint32 pid = 2;
}

message ContainerNetworkDeleteRequest {
    // (required) container id
    string container_id = 1;

    // (required) pid will be used to form the netns path (/proc/<pid>/ns/net)
    uint32 pid = 2;
}

// Update CNI config by rendering the config template predefined in abbot's config
// this Request containes all variables supported in the config template
message ContainerNetworkConfigEnsureRequest {
    string ipv4_subnet = 1;
    string ipv6_subnet = 2;
}

message ContainerNetworkQueryRequest {
    uint32 pid = 1;
}

message ContainerNetworkStatusResponse {
    uint32 pid = 1;

    repeated NetworkInterface interfaces = 2;
}

message ContainerNetworkStatusListResponse {
    // key: container id
    map<string, ContainerNetworkStatusResponse> container_networks = 1;
}
