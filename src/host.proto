/*
Copyright 2020 The arhat.dev Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package abbot;

option go_package = "arhat.dev/abbot-proto/abbotgopb";

import "meta.proto";

// drivers
import "driver_unknown.proto";
import "driver_bridge.proto";
import "driver_wireguard.proto";

message HostNetworkInterface {
    NetworkInterface metadata = 1;

    // provider of this interface, if this interface was configured
    // in configuration, the provider MUST be `static`
    //
    // when you create a network interface dynamically
    // you should provide a unique provider value to
    // make sure this interface is always managed by
    // you
    string provider = 2;

    oneof config {
        // driver not supported, SHOULD only be used by
        // abbot daemon in HostNetworkConfigResponse to report
        // unmanaged network interfaces
        DriverUnknown unknown = 10;

        DriverBridge bridge = 11;
        DriverWireguard wireguard = 12;
    }
}

// Ensure host network interfaces
//
// persist and apply host network config for single provider source,
// which means all expected interfaces in one request MUST share the
// same provider, this restriction is to protect ohter managed
// interfaces from being updated unexpectedly.
//
// existing interfaces with same provider but not listed in the expected
// will be delete, so request SHOULD include all interfaces from the
// provider source.
//
// this request is transactional, if any failure occurred to any one
// of the expected interfaces, abbot MUST rollback to previous state
// and return an error indicating which interface failed
message HostNetworkConfigEnsureRequest {
    string provider = 1;

    repeated HostNetworkInterface expected = 2;
}

// Query host network config
message HostNetworkConfigQueryRequest {
    // filter interfaces from config sources
    //
    // if no provider set, abbot MUST return all known host
    // interfaces, including unmanaged interfaces
    repeated string providers = 1;
}

message HostNetworkConfigResponse {
    repeated HostNetworkInterface actual = 1;
}
